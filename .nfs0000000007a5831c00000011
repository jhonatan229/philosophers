#!/usr/bin/env bash

RESET="\033[0m"
RED="\033[31m"
GREEN="\033[32m"

project_folder=$(pwd)
project_program="philo"
timeout_seconds=5
tests_index=0
tests=()
passed=0
failed=0

function compile_project() {
	if [ -d $project_folder ]; then
		make > /dev/null
		if [ ! -f $project_folder/$project_program ]; then
			echo "Program not found"
			exit 1
		fi
	else
		echo "Project folder not found"
		exit 1
	fi
}

function test_running() {
	let tests_index++
	tests[$tests_index]="$1\t$2\t$3\t$4\t$5"
	echo -e "Running\t${tests[$tests_index]}"
}

function test_failed() {
	tput cuu1
	tput el
	let failed++
	echo -e "${RED}Failed${RESET}\t${tests[$tests_index]}"
	return 1
}

function test_passed() {
	tput cuu1
	tput el
	let passed++
	echo -e "${GREEN}Passed${RESET}\t${tests[$tests_index]}"
	return 0
}

function test_should_fail() {
	test_running $1 $2 $3 $4 $5
	$($project_folder/$project_program $1 $2 $3 $4 $5 1> stdout.txt 2> stderr.txt)
	if [ $? -eq 1 ] && [ -s stderr.txt ]; then
		test_passed
		return 0
	fi
	test_failed
	return 1
}

function test_should_be_alive() {
	test_running $1 $2 $3 $4 $5
	$((time -p timeout $timeout_seconds $project_folder/$project_program $1 $2 $3 $4 $5) 1> stdout.txt 2> stderr.txt)
	execution_time=$(cat stderr.txt | grep real | sed -rn "s/.*[[:space:]]([[:digit:]]+)\..*/\1/p")
	deads=$(cat stdout.txt | grep died | wc -l)
	tput cuu1
	tput el
	if [ "$execution_time" -lt $timeout ] || [ "$deads" -gt 0 ]; then
		test_failed
		return 1
	fi
	test_passed
	return 0
}

function test_should_die() {
	test_running $1 $2 $3 $4 $5
	$(timeout $timeout_seconds $project_folder/$project_program $1 $2 $3 $4 $5 1> stdout.txt)
	if [ $(cat stdout.txt | grep -Ezo "died(\n|.)*" | wc -l) -ne 1 ] || [ $(cat stdout.txt | tail -n 1 | grep died | wc -l) -ne 1 ]; then
		test_failed
		return 1
	fi
	dead=$(cat stdout.txt | tail -n 1 | sed -rn "s/.*[[:space:]]([[:digit:]]).*/\1/p")
	dead_lines=$(cat stdout.txt | grep " $dead " | wc -l)
	simulation_start=$(cat stdout.txt | head -n 1 | sed -rn "s/([[:digit:]]+)[[:space:]].*/\1/p")
	last_meal=$(cat stdout.txt | grep " $dead is eating" | tail -n 2 | head -n 1 | sed -rn "s/([[:digit:]]+)[[:space:]].*/\1/p")
	last_status=$(cat stdout.txt | grep " $dead " | tail -n 1 | sed -rn "s/([[:digit:]]+)[[:space:]].*/\1/p")
	if [ "$dead_lines" -lt 2 ]; then
		last_meal=$simulation_start
	fi
	let limit="$last_meal + $2 + 10"
	if [ "$limit" -le $last_status ]; then
		test_failed
		return 1
	fi
	test_passed
	return 0
}

function test_eat_n_times() {
	test_running $1 $2 $3 $4 $5
	$($project_folder/$project_program $1 $2 $3 $4 $5 1> stdout.txt)
	if [ $? -ne 0 ] || [ $(cat stdout.txt | grep -Ezo "died(\n|.)*" | wc -l) -gt 0 ]; then
		test_failed
		return 1
	fi
	philosopher=0
	while [ $philosopher -lt $1 ]; do
		let philosopher++
		if [ $(cat stdout.txt | grep " $philosopher is eating" | wc -l) -ne $5 ]; then
			test_failed
			return 1
		fi
	done
	test_passed
	return 0
}

compile_project

echo ""
echo "Invalid arguments"
echo "==========================="
echo ""

test_should_fail
test_should_fail 1
test_should_fail 1 2
test_should_fail 1 2 3
test_should_fail 1 2 3 a
test_should_fail 1 2 3 4 b
test_should_fail 1 2 3 4 -5
test_should_fail 1 2 3 -4
test_should_fail 1 2 -3
test_should_fail 1 -2
test_should_fail -1
test_should_fail 1 1.2
test_should_fail 1 1.2 1.23
test_should_fail 1 1.2 1.23 1.234
test_should_fail 42 42 42 42 42a
test_should_fail 42 42 42 42a
test_should_fail 42 42 42a
test_should_fail 42 42a
test_should_fail 42a
test_should_fail -2147483649 2 2 2
test_should_fail +2147483648 2 2 2
test_should_fail 1 2 3 4 4294967295

echo ""
echo "Should die"
echo "==========================="
echo ""

test_should_die 1 200 70 80
test_should_die 1 10 100 100 2147483647
test_should_die 1 200 80 70 30
test_should_die 20 150 70 80
test_should_die 4 310 200 100
test_should_die 4 10 200 100
test_should_die 100 99 66 66 2
test_should_die 3 100 60 30 5
test_should_die 5 150 90 30 10
test_should_die 3 0 0 0
test_should_die 97 200 300 100

echo ""
echo "Should be alive"
echo "==========================="
echo ""

test_should_be_alive 4 311 150 150
test_should_be_alive 3 290 70 70
test_should_be_alive 5 320 60 90 1000
test_should_be_alive 200 256 61 62
test_should_be_alive 99 250 60 60
test_should_be_alive 2 370 90 90
test_should_be_alive 100 370 80 100
test_should_be_alive 1 20000 70 80
test_should_be_alive 3 600 100 100
test_should_be_alive 2 410 200 200

echo ""
echo "Should eat a number of times"
echo "==========================="
echo ""

test_eat_n_times 4 311 150 150 1
test_eat_n_times 3 370 90 90 17
test_eat_n_times 200 300 60 80 8
test_eat_n_times 2 350 70 100 29
test_eat_n_times 14 330 60 100 0
test_eat_n_times 100 350 100 60 3
test_eat_n_times 2 20000 10 10 27
test_eat_n_times 3 110 0 0 9
test_eat_n_times 11 0 100 1000 0

echo ""
echo "Results"
echo "==========================="
echo ""

echo "Passed: $passed"
echo "Failed: $failed"

rm -rf stdout.txt stderr.txt